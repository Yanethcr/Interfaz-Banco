import tkinter as tk
from tkinter import messagebox, ttk
import threading
from functools import partial

# Configuración de colores
COLOR_FONDO = "#121212"  # Negro oscuro
COLOR_PRIMARIO = "#FFD700"  # Dorado
COLOR_SECUNDARIO = "#D4AF37"  # Dorado más oscuro
COLOR_TEXTO = "#FFFFFF"  # Blanco
COLOR_LISTA_FONDO = "#1E1E1E"  # Gris muy oscuro
COLOR_BOTON_ACTIVO = "#D4AF37"  # Dorado para botones activos
COLOR_BORDE = "#FFD700"  # Dorado para bordes

SERVICIOS = {
    "R": "Retiro",
    "D": "Depósito",
    "P": "Pago tarjeta",
    "E": "Estado de cuenta",
    "A": "Aclaraciones"
}

contador_turnos = {k: 0 for k in SERVICIOS}
cola_turnos = []  # turno, servicio, ventanilla
historial_turnos = []
semaforo = threading.Semaphore()

def generar_turno(tipo):
    contador_turnos[tipo] += 1
    turno = f"{tipo}{contador_turnos[tipo]:03}"
    cola_turnos.append([turno, SERVICIOS[tipo], None])
    actualizar_lista_turnos()
    messagebox.showinfo("Turno generado", f"Su turno es: {turno} - {SERVICIOS[tipo]}")

def actualizar_lista_turnos():
    lista_turnos.delete(0, tk.END)
    for turno, servicio, ventanilla in cola_turnos:
        info = f"{turno} - {servicio}"
        if ventanilla:
            info += f" → Ventanilla {ventanilla}"
        lista_turnos.insert(tk.END, info)

def abrir_ventana_operacion(cajero_id, var_estado, turno_info):
    ventana_operacion = tk.Toplevel()
    ventana_operacion.title(f"Ventanilla {cajero_id} - {turno_info[1]}")
    ventana_operacion.geometry("400x300")
    ventana_operacion.config(bg=COLOR_FONDO)
    ventana_operacion.resizable(False, False)
    
    # Marco principal
    frame = tk.Frame(ventana_operacion, bg=COLOR_FONDO, padx=20, pady=20)
    frame.pack(expand=True, fill="both")
    
    tk.Label(frame, text=f"Atendiendo turno: {turno_info[0]}", 
             font=("Arial", 14), bg=COLOR_FONDO, fg=COLOR_PRIMARIO).pack(pady=10)
    
    servicio = turno_info[1]
    
    def finalizar_operacion():
        ventana_operacion.destroy()
        var_estado.set("Esperando...")
        messagebox.showinfo("Operación completada", f"Turno {turno_info[0]} completado")
    
    if servicio == "Depósito":
        tk.Label(frame, text="Cantidad a depositar:", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_TEXTO).pack(pady=10)
        
        entrada = ttk.Entry(frame, font=("Arial", 12))
        entrada.pack(pady=10)
        entrada.focus()
        
        btn_confirmar = ttk.Button(frame, text="Confirmar Depósito", 
                                 command=finalizar_operacion)
        btn_confirmar.pack(pady=20)
        
        # Configurar Enter para confirmar
        ventana_operacion.bind('<Return>', lambda e: finalizar_operacion())
        
    elif servicio == "Retiro":
        tk.Label(frame, text="Cantidad a retirar:", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_TEXTO).pack(pady=10)
        
        entrada = ttk.Entry(frame, font=("Arial", 12))
        entrada.pack(pady=10)
        entrada.focus()
        
        btn_confirmar = ttk.Button(frame, text="Confirmar Retiro", 
                                 command=finalizar_operacion)
        btn_confirmar.pack(pady=20)
        
        ventana_operacion.bind('<Return>', lambda e: finalizar_operacion())
        
    elif servicio == "Pago tarjeta":
        tk.Label(frame, text="Número de tarjeta:", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_TEXTO).pack(pady=5)
        
        entrada_tarjeta = ttk.Entry(frame, font=("Arial", 12))
        entrada_tarjeta.pack(pady=5)
        
        tk.Label(frame, text="Monto a pagar:", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_TEXTO).pack(pady=5)
        
        entrada_monto = ttk.Entry(frame, font=("Arial", 12))
        entrada_monto.pack(pady=5)
        entrada_monto.focus()
        
        btn_confirmar = ttk.Button(frame, text="Confirmar Pago", 
                                 command=finalizar_operacion)
        btn_confirmar.pack(pady=20)
        
        ventana_operacion.bind('<Return>', lambda e: finalizar_operacion())
        
    elif servicio == "Estado de cuenta":
        tk.Label(frame, text="Consultando estado de cuenta...", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_TEXTO).pack(pady=20)
        
        # Simular consulta
        tk.Label(frame, text="Saldo actual: $10,000.00", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_PRIMARIO).pack(pady=10)
        
        btn_confirmar = ttk.Button(frame, text="Cerrar Consulta", 
                                 command=finalizar_operacion)
        btn_confirmar.pack(pady=20)
        
    elif servicio == "Aclaraciones":
        tk.Label(frame, text="Descripción de la aclaración:", 
                font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_TEXTO).pack(pady=10)
        
        entrada = tk.Text(frame, font=("Arial", 12), height=5, width=30)
        entrada.pack(pady=10)
        entrada.focus()
        
        btn_confirmar = ttk.Button(frame, text="Registrar Aclaración", 
                                 command=finalizar_operacion)
        btn_confirmar.pack(pady=20)
        
    # Configurar cierre de ventana
    ventana_operacion.protocol("WM_DELETE_WINDOW", finalizar_operacion)

def atender_turno_cajero(cajero_id, var_estado):
    semaforo.acquire()
    if cola_turnos:
        turno_info = cola_turnos.pop(0)
        turno_info[2] = cajero_id
        historial_turnos.append((*turno_info, f"Cajero {cajero_id}"))
        actualizar_lista_turnos()
        var_estado.set(f"Atendiendo: {turno_info[0]} ({turno_info[1]})")
        
        # Abrir ventana de operación específica
        ventana.after(100, lambda: abrir_ventana_operacion(cajero_id, var_estado, turno_info))
    else:
        var_estado.set("Sin turnos.")
    semaforo.release()

def mostrar_historial():
    historial_str = "\n".join([f"{t} - {s} → Ventanilla {v}" for t, s, v, _ in historial_turnos]) or "Sin historial aún."
    messagebox.showinfo("Historial de Turnos", historial_str)

# INTERFAZ PRINCIPAL
ventana = tk.Tk()
ventana.title("Sistema de Turnos Bancarios - MultiCajero")
ventana.geometry("900x900")
ventana.config(bg=COLOR_FONDO)

# Estilo general para los widgets
estilo = {
    'font': ("Arial", 12),
    'bg': COLOR_FONDO,
    'fg': COLOR_PRIMARIO,
    'activebackground': COLOR_BOTON_ACTIVO,
    'activeforeground': COLOR_FONDO,
    'highlightbackground': COLOR_BORDE
}

# Título y selección de servicios
tk.Label(ventana, text="Sistema de Turnos Bancarios", 
         font=("Arial", 18, "bold"), bg=COLOR_FONDO, fg=COLOR_PRIMARIO).pack(pady=20)

tk.Label(ventana, text="Seleccione un servicio:", 
         font=("Arial", 14), bg=COLOR_FONDO, fg=COLOR_PRIMARIO).pack(pady=10)

# Botones de servicios
for letra, servicio in SERVICIOS.items():
    tk.Button(
        ventana,
        text=servicio,
        **estilo,
        width=25,
        highlightthickness=2,
        relief="groove",
        command=lambda l=letra: generar_turno(l)
    ).pack(pady=5)

# Lista de turnos en espera
tk.Label(ventana, text="Turnos en espera:", 
         font=("Arial", 12), bg=COLOR_FONDO, fg=COLOR_PRIMARIO).pack(pady=10)

lista_turnos = tk.Listbox(
    ventana, 
    width=50, 
    height=15,
    font=("Courier", 10),
    bg=COLOR_LISTA_FONDO,
    fg=COLOR_PRIMARIO,
    selectbackground=COLOR_SECUNDARIO,
    selectforeground=COLOR_FONDO,
    highlightthickness=1,
    highlightbackground=COLOR_BORDE,
    relief="solid"
)
lista_turnos.pack(pady=5)

# Botón de historial
tk.Button(
    ventana,
    text="Ver historial de turnos atendidos",
    **estilo,
    command=mostrar_historial
).pack(pady=20)

# VENTANA DE CAJEROS
ventana2 = tk.Toplevel(ventana)
ventana2.title("Panel de Cajeros")
ventana2.geometry("600x600")
ventana2.config(bg=COLOR_FONDO)

# Configuración de cajeros
NUM_CAJEROS = 5  
for i in range(1, NUM_CAJEROS + 1):
    frame = tk.Frame(
        ventana2, 
        bg=COLOR_FONDO, 
        bd=2,
        highlightbackground=COLOR_BORDE,
        highlightthickness=2,
        padx=10, 
        pady=10
    )
    frame.pack(pady=10, fill="x", padx=20)

    tk.Label(
        frame, 
        text=f"Cajero {i}", 
        font=("Arial", 12, "bold"), 
        bg=COLOR_FONDO, 
        fg=COLOR_PRIMARIO
    ).pack(anchor="w")
    
    estado_var = tk.StringVar()
    estado_var.set("Esperando...")
    tk.Label(
        frame, 
        textvariable=estado_var, 
        font=("Arial", 11), 
        bg=COLOR_FONDO, 
        fg=COLOR_SECUNDARIO
    ).pack(anchor="w", pady=5)
    
    tk.Button(
        frame,
        text="Atender siguiente turno",
        **estilo,
        command=partial(atender_turno_cajero, i, estado_var)
    ).pack(pady=5)

ventana.mainloop()
